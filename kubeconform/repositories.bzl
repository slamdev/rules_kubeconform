"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//kubeconform/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
def rules_kubeconform_dependencies():
    # The minimal version of bazel_skylib we require
    maybe(
        http_archive,
        name = "bazel_skylib",
        sha256 = "cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz",
        ],
    )

_DOC = "TODO"
_ATTRS = {
    "kubeconform_version": attr.string(mandatory = True),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _kubeconform_repo_impl(repository_ctx):
    repository_ctx.report_progress("Downloading Kubeconform releases info")
    repository_ctx.download(
        url = ["https://api.github.com/repos/yannh/kubeconform/releases"],
        output = "versions.json",
    )
    versions = repository_ctx.read("versions.json")
    version_found = False
    for v in json.decode(versions):
        version = v["tag_name"].lstrip("v")
        if version == repository_ctx.attr.kubeconform_version:
            version_found = True
    if not version_found:
        fail("did not find {} version in https://api.github.com/repos/kubeconform/kubeconform/releases".format(repository_ctx.attr.kubeconform_version))

    file_url = "https://github.com/yannh/kubeconform/releases/download/v{}/kubeconform-{}.tar.gz".format(repository_ctx.attr.kubeconform_version, repository_ctx.attr.platform)

    repository_ctx.report_progress("Downloading and extracting Kubeconform toolchain")
    repository_ctx.download_and_extract(
        url = file_url,
    )

    build_content = """#Generated by kubeconform/repositories.bzl
load("@slamdev_rules_kubeconform//kubeconform:toolchain.bzl", "kubeconform_toolchain")
kubeconform_toolchain(name = "kubeconform_toolchain", target_tool = select({
        "@bazel_tools//src/conditions:host_windows": "kubeconform.exe",
        "//conditions:default": "kubeconform",
    }),
)
"""

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

kubeconform_repositories = repository_rule(
    _kubeconform_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def kubeconform_register_toolchains(name, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "kubeconform_linux_amd64" -
      this repository is lazily fetched when kubeconform is needed for that platform.
    - TODO: create a convenience repository for the host platform like "kubeconform_host"
    - create a repository exposing toolchains for each platform like "kubeconform_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.

    Args:
        name: base name for all created repos, like "kubeconform0_4_12"
        **kwargs: passed to each kubeconform_repositories call
    """
    for platform in PLATFORMS.keys():
        kubeconform_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
